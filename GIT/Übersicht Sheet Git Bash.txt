# 🛠️ Git Cheat Sheet für Projekte

Dieses kleine Git-Cheat-Sheet hilft dir dabei, die wichtigsten Git-Befehle und typischen Workflows schnell parat zu haben.  
Ideal für die Arbeit an **Jeannie Civic** — und für alle zukünftigen Projekte!

---

## 🚀 1️⃣ Initiales Setup


git init                  				        # Neues Git-Repo lokal anlegen
git remote add origin <URL>    		# GitHub Repo verknüpfen (SSH oder HTTPS)
git branch -M main              # Branch auf 'main' setzen (Standard)
git push -u origin main         # Ersten Push machen

📥 2️⃣ Aktuelle Änderungen von GitHub holen

git pull                        # Änderungen von GitHub holen (wichtig bei Teamarbeit oder an Zweitrechnern)


✍️ 3️⃣ Lokale Änderungen committen und hochladen

git status                         # Zeigt an, was sich geändert hat / was untracked ist
git add .                          # ALLE Änderungen für den nächsten Commit vormerken
git commit -m "Kurze Nachricht"    # Commit machen
git push                           # Änderungen auf GitHub hochladen

🔍 4️⃣ Einzelne Dateien committen

git add path/to/file.txt           # Nur einzelne Datei hinzufügen
git commit -m "Nachricht zu dieser Datei"
git push

🚀 5️⃣ Neue Branches anlegen (später nützlich)

git checkout -b feature/neues-feature    # Neuen Branch anlegen + direkt wechseln
git push -u origin feature/neues-feature # Neuen Branch pushen

🔙 6️⃣ Git "Rettungsleine" – Änderungen zurücknehmen

git restore <file>                 # Änderungen an einer Datei verwerfen (zurück zur letzten Commit-Version)
git restore --staged <file>        # Datei aus Staging-Bereich entfernen (noch nicht committen)
git log --oneline                   # Kompakte Übersicht der letzten Commits

🗂️ 7️⃣ Leere Ordner sichtbar machen (z.B. für assets/, src/, docs/)

→ .gitkeep Datei im leeren Ordner anlegen (mit oder ohne Inhalt)
→ git add path/to/.gitkeep
→ git commit -m "Ordnerstruktur ergänzt"
→ git push

💡 Bonus Tipps

git config --global core.autocrlf true    # Verhindert Zeilenende-Probleme zwischen Windows und Git (CRLF vs LF)


✅ Nutze git status OFT → deine beste Git-Sicherheitsleine → zeigt immer den aktuellen Zustand.

✅ Nutze git log --oneline → um schnell die Historie zu prüfen.

✅ Formuliere Commit-Nachrichten sinnvoll → 5-7 Wörter sind meist ausreichend.